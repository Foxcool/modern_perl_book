=head1 Taint

Z<taint>

Perl предоставляет инструменты для написания безопасных программ. Эти
инструменты E<mdash> не замена для внимательного обдумывания и планирования, но
они I<вознаграждают> внимание и понимание и могут помочь вам избежать
неочевидных ошибок.

=head2 Использование taint-режима

X<taint>

I<Режим tain> (или просто I<taint>) добавляет метаданные ко всем данным,
приходящим из-за пределов вашей программы. Любые данные, производные от
запятнанных данных, тоже запятнаны. Вы можете использовать запятнанные данные в
своей программе, но если вы используете их для воздействия на окружающий мир
E<mdash> если вы используете их небезопасно E<mdash> Perl выбросит фатальное
исключение.

C<perldoc perlsec> объясняет taint-режим в обширных деталях.

X<C<-T>; taint command-line argument>
X<command-line arguments; C<-T>>
X<C<%ENV>>

Для включения taint-режима запустите свою программу с аргументом командной
строки C<-T>. Если вы используете этот аргумент в строчке C<#!>, вы должны
запустить программу напрямую; если вы запустите её как C<perl mytaintedapppl.pl>
и пренебрежёте флагом C<-T>, Perl выйдет с исключением. К тому моменту, когда
Perl встречает флаг в строке C<#!>, уже упущена возможность пометить данные
окружения, например, входящие в C<%ENV>.

=head2 Источники taint

Taint может приходить из двух мест: файловый ввод и операционное окружение
программы. Первое E<mdash> это всё, что вы читаете из файла или получаете от
пользователей в случае веб- или сетевого программирования. Второе включает
любые аргументы командной строки, переменные окружения и данные из системных
вызовов. Даже такие операции, как чтение из дескриптора директории, генерируют
запятнанные данные.

X<C<Scalar::Util>>
X<C<tainted()>>
X<taint; checking>

Функция C<tainted()> из встроенного модуля C<Scalar::Util> возвращает истину,
если её аргумент запятнан:

=begin programlisting

    die 'Oh no! Tainted data!'
        if Scalar::Util::tainted( $suspicious_value );

=end programlisting

=head2 Удаление taint из данных

X<taint; untainting>
X<untainting>

Чтобы удалить taing вы должны выделить проверенные порции данных с помощью
захвата в регулярном выражении. Захваченные данные будут untainted. Если ваш
пользовательский ввод содержит телефонный номер США, вы можете untaint его так:

=begin programlisting

    die 'Number still tainted!'
        unless $number =~ /(\(/d{3}\) \d{3}-\d{4})/;

    my $safe_number = $1;

=end programlisting

Чем более конкретен ваш шаблон относительно того, что вы позволяете, тем более
безопасной может быть ваша программа. Противоположный подход I<отрицания>
конкретных элементов или форм имеет риск недосмотра чего-либо вредоносного.
Гораздо лучше не пропусить что-нибудь безопасное, но неожиданное, чем пропустить
что-нибудь опасное, но выглядящее безопасным. Несмотря на это, ничто не
запрещает вам написать захват для всего содержимого переменной E<mdash> но в
этом случае зачем использовать taint?

=head2 Удаление taint из окружения

X<taint; removing sources of>

Суперглобальная переменная C<%ENV> представляет переменные окружения системы.
Эти данные tainted, потому что силы за пределами контроля программы могут
манипулировать данными в них. Любая переменная окружения, влияющая на то, как
Perl или оболочка находит файлы и директории E<mdash> направление атаки.
Taint-чувствительная программа должна удалить несколько ключей из C<%ENV> и
установить в C<$ENV{PATH}> конкретный и хорошо защищённый путь:

=begin programlisting

    delete @ENV{ qw( IFS CDPATH ENV BASH_ENV ) };
    $ENV{PATH} = '/path/to/app/binaries/';

=end programlisting

Если вы не установите C<$ENV{PATH}> правильно, вы будете получать сообщения о
его небезопасности. Если эта переменная окружения содержит текущую рабочую
директорию, или если она содержит относительные директории, или указанные
директории имеют общий доступ на записть, умный атакующий может взломать
системные вызовы для нанесения вреда.

По аналогичным причинам C<@INC> в taint-режиме не содержит текущую рабочую
директорию. Perl также будет игнорировать переменные окружения C<PERL5LIB> и
C<PERLLIB>. Используйте прагму C<lib> или флаг C<-I> для C<perl> чтобы добавить
библиотечные каталоги в программу.

=head2 Недостатки Taint

Taint-режим E<mdash> это всё или ничего. Он либо включен, либо выключен. Это
иногда приводит людей к использованию разрешительных шаблонов для untaint
данных и даёт иллюзию безопасности. Внимательно проверяйте untainting.

X<C<-t>; enable baby taint command-line argument>
X<command-line arguments; C<-t>>

К сожалению, не все модули правильно обрабатывают tainted данные. Это ошибка,
которую CPAN-авторы должны принимать всерьёз. Если вам нужно сделать
унаследованный код taint-безопасным, рассмотрите использование флага C<-t>,
который включает taint-режим, но уменьшает нарушения taint с исключений до
предупреждений. Это не замена для полного taint-режима, но это позволяет вам
существующие программы без подхода E<laquo>всё или ничегоE<raquo> C<-T>.
